{"ast":null,"code":"import React from 'react';\nimport { notifyManager } from '../core/notifyManager';\nimport { useQueryErrorResetBoundary } from './QueryErrorResetBoundary';\nimport { useQueryClient } from './QueryClientProvider';\nexport function useBaseQuery(options, Observer) {\n  var queryClient = useQueryClient();\n  var errorResetBoundary = useQueryErrorResetBoundary();\n  var defaultedOptions = queryClient.defaultQueryObserverOptions(options); // Include callbacks in batch renders\n\n  if (defaultedOptions.onError) {\n    defaultedOptions.onError = notifyManager.batchCalls(defaultedOptions.onError);\n  }\n\n  if (defaultedOptions.onSuccess) {\n    defaultedOptions.onSuccess = notifyManager.batchCalls(defaultedOptions.onSuccess);\n  }\n\n  if (defaultedOptions.onSettled) {\n    defaultedOptions.onSettled = notifyManager.batchCalls(defaultedOptions.onSettled);\n  }\n\n  if (defaultedOptions.suspense) {\n    // Always set stale time when using suspense to prevent\n    // fetching again when directly re-mounting after suspense\n    if (typeof defaultedOptions.staleTime !== 'number') {\n      defaultedOptions.staleTime = 1000;\n    } // Prevent retrying failed query if the error boundary has not been reset yet\n\n\n    if (!errorResetBoundary.isReset()) {\n      defaultedOptions.retryOnMount = false;\n    }\n  } // Create query observer\n\n\n  var observerRef = React.useRef();\n  var observer = observerRef.current || new Observer(queryClient, defaultedOptions);\n  observerRef.current = observer; // Update options\n\n  if (observer.hasListeners()) {\n    observer.setOptions(defaultedOptions);\n  }\n\n  var currentResult = observer.getCurrentResult();\n\n  var _React$useState = React.useState(currentResult),\n      setCurrentResult = _React$useState[1]; // Subscribe to the observer\n\n\n  React.useEffect(function () {\n    errorResetBoundary.clearReset();\n    return observer.subscribe(notifyManager.batchCalls(setCurrentResult));\n  }, [observer, errorResetBoundary]); // Handle suspense\n\n  if (observer.options.suspense || observer.options.useErrorBoundary) {\n    if (observer.options.suspense && currentResult.isLoading) {\n      errorResetBoundary.clearReset();\n      var unsubscribe = observer.subscribe();\n      throw observer.refetch().finally(unsubscribe);\n    }\n\n    if (currentResult.isError) {\n      throw currentResult.error;\n    }\n  }\n\n  return observer.options.notifyOnChangeProps === 'tracked' ? observer.getTrackedCurrentResult() : currentResult;\n}","map":{"version":3,"sources":["/home/john/Downloads/09vk3/.yarn/$$virtual/react-query-virtual-38cd9a33ef/0/cache/react-query-npm-3.7.1-8c7d08340d-860463b47f.zip/node_modules/react-query/es/react/useBaseQuery.js"],"names":["React","notifyManager","useQueryErrorResetBoundary","useQueryClient","useBaseQuery","options","Observer","queryClient","errorResetBoundary","defaultedOptions","defaultQueryObserverOptions","onError","batchCalls","onSuccess","onSettled","suspense","staleTime","isReset","retryOnMount","observerRef","useRef","observer","current","hasListeners","setOptions","currentResult","getCurrentResult","_React$useState","useState","setCurrentResult","useEffect","clearReset","subscribe","useErrorBoundary","isLoading","unsubscribe","refetch","finally","isError","error","notifyOnChangeProps","getTrackedCurrentResult"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { notifyManager } from '../core/notifyManager';\nimport { useQueryErrorResetBoundary } from './QueryErrorResetBoundary';\nimport { useQueryClient } from './QueryClientProvider';\nexport function useBaseQuery(options, Observer) {\n  var queryClient = useQueryClient();\n  var errorResetBoundary = useQueryErrorResetBoundary();\n  var defaultedOptions = queryClient.defaultQueryObserverOptions(options); // Include callbacks in batch renders\n\n  if (defaultedOptions.onError) {\n    defaultedOptions.onError = notifyManager.batchCalls(defaultedOptions.onError);\n  }\n\n  if (defaultedOptions.onSuccess) {\n    defaultedOptions.onSuccess = notifyManager.batchCalls(defaultedOptions.onSuccess);\n  }\n\n  if (defaultedOptions.onSettled) {\n    defaultedOptions.onSettled = notifyManager.batchCalls(defaultedOptions.onSettled);\n  }\n\n  if (defaultedOptions.suspense) {\n    // Always set stale time when using suspense to prevent\n    // fetching again when directly re-mounting after suspense\n    if (typeof defaultedOptions.staleTime !== 'number') {\n      defaultedOptions.staleTime = 1000;\n    } // Prevent retrying failed query if the error boundary has not been reset yet\n\n\n    if (!errorResetBoundary.isReset()) {\n      defaultedOptions.retryOnMount = false;\n    }\n  } // Create query observer\n\n\n  var observerRef = React.useRef();\n  var observer = observerRef.current || new Observer(queryClient, defaultedOptions);\n  observerRef.current = observer; // Update options\n\n  if (observer.hasListeners()) {\n    observer.setOptions(defaultedOptions);\n  }\n\n  var currentResult = observer.getCurrentResult();\n\n  var _React$useState = React.useState(currentResult),\n      setCurrentResult = _React$useState[1]; // Subscribe to the observer\n\n\n  React.useEffect(function () {\n    errorResetBoundary.clearReset();\n    return observer.subscribe(notifyManager.batchCalls(setCurrentResult));\n  }, [observer, errorResetBoundary]); // Handle suspense\n\n  if (observer.options.suspense || observer.options.useErrorBoundary) {\n    if (observer.options.suspense && currentResult.isLoading) {\n      errorResetBoundary.clearReset();\n      var unsubscribe = observer.subscribe();\n      throw observer.refetch().finally(unsubscribe);\n    }\n\n    if (currentResult.isError) {\n      throw currentResult.error;\n    }\n  }\n\n  return observer.options.notifyOnChangeProps === 'tracked' ? observer.getTrackedCurrentResult() : currentResult;\n}"]},"metadata":{},"sourceType":"module"}